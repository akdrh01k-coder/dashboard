# 수정된 전체 코드 (붙여넣어 실행 가능)
import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from streamlit_option_menu import option_menu
import streamlit.components.v1 as components
from urllib import parse as _url
from datetime import datetime, timedelta   # <-- timedelta 추가
import random
import string

# ========== 기본 설정 ==========
st.set_page_config(
    page_title="Eco Friendship 관제 대시보드",
    page_icon="🚢",
    layout="wide",
    initial_sidebar_state="expanded"
)


# ========== 전역 스타일 ==========
st.markdown("""
<style>
/* 기본 요소 숨김 */
#MainMenu, header, footer {visibility: hidden;}

/* 상단 고정 바와 충돌 안 나게 여백 확보 */
.main .block-container { padding-top: 96px !important; }

/* 사이드바 밝은 톤 */
section[data-testid="stSidebar"] {
    background: #F1F1F9 !important;
    border-right: 1px solid #F1F1F9;
}

/* 대시보드 카드 - 전역에 영향 안 주도록 클래스 기반 */
.dash-card {
    background: #F6F7FB;
    border: 1px solid #EBEDF5;
    border-radius: 14px;
    padding: 16px 18px;
    box-shadow: 0 6px 16px rgba(0,0,0,0.06);
}
.dash-card h3 { margin: 0 0 8px 0; }
.badge {
    display:inline-block; padding: 2px 8px; border-radius: 999px;
    font-size: 12px; font-weight: 700; background:#E8F6ED; color:#1E854A;
    border:1px solid #CFECDC;
}

/* 히어로 섹션 */
.hero {
    background: linear-gradient(135deg,#F0F2F7 0%, #E6EBF7 100%);
    border:1px solid #dfe5f2; border-radius:16px; padding:18px 22px;
}

/* KPI 숫자 크게 */
.kpi-number { font-size: 36px; font-weight: 800; line-height: 1.1; }
.kpi-sub { color:#6b7280; font-size: 12px; }

/* ----- 사이드바 보조 스타일 (추가) ----- */
.sb-header { margin: 4px 2px 10px 2px; }
.sb-brand { display:flex; align-items:center; gap:8px; }
.sb-brand .logo { font-size:25px; }
.sb-brand .name { font-size:24px; font-weight:800; letter-spacing:.2px; }
.sb-subtitle { margin-top:2px; font-size:15px; opacity:.9; }
.sb-hr { border:0; border-top:1px solid #202635; margin:12px 0; }
.sb-section-title { font-size:20px; font-weight:700; letter-spacing:.2px; margin:2px 0 6px; opacity:.9; }
.sb-team { font-size:13px; line-height:1.5; }

 /* ===== 섹션(큰 블록) & 클릭 가능한 카드 ===== */
.section{
  background:#FFFFFF; border:1px solid #E6ECF5; border-radius:16px;
  padding:16px 18px; box-shadow:0 10px 24px rgba(16,24,40,.06); margin-bottom:16px;
}
.section.soft{ background:#F7F9FC; }


/* ===== 네비게이션 카드 (정사각형) ===== */
.nav-card { position: relative; }                  /* 클릭 오버레이를 위한 기준 */
.nav-card-surface{
  background:#FFFFFF;
  border:1px solid #E4E9F4;
  border-radius:16px;
  padding:16px 18px;
  height:168px;                                    /* 정사각형 느낌 */
  box-shadow:0 12px 28px rgba(16,24,40,.06);
  transition: transform .12s ease, box-shadow .12s ease, border-color .12s ease, background .12s ease;
}
.nav-card-surface:hover{
  border-color:#BBD3FF; background:#F7FAFF; transform: translateY(-2px);
}
.nav-card-title{
  font-weight:800; font-size:18px; margin:0 0 8px 0; display:flex; align-items:center; gap:8px;
}
.nav-card-desc{ color:#6b7280; font-size:13px; line-height:1.5; }

/* 카드 전체를 클릭 가능하게 만드는 투명 버튼 오버레이 */
.nav-card .stButton{ position:absolute; inset:0; margin:0; }
.nav-card .stButton > button{
  position:absolute; inset:0; opacity:0; width:100%; height:100%; cursor:pointer;
  border:none; background:transparent; padding:0;
}

/* ===== 네비게이션 카드 오버레이 (카드 전체 클릭) ===== */
.nav-card { position: relative; }
.nav-card-surface{
  /* 기존 카드 느낌 유지 (연한 배경/보더/라운드/섀도우) */
  background:#FFFFFF;
  border:1px solid #E4E9F4;
  border-radius:16px;
  padding:16px 18px;
  height:170px;                        /* 정사각형 느낌 */
  box-shadow:0 12px 28px rgba(16,24,40,.06);
  transition: transform .12s ease, box-shadow .12s ease, border-color .12s ease, background .12s ease;
}
.nav-card-surface:hover{ border-color:#BBD3FF; background:#F7FAFF; transform: translateY(-2px); }

/* 카드 안 타이포는 기존 스타일 재사용(.kpi-number, .kpi-sub, .badge 등) */
.nav-card-title{ font-weight:800; font-size:18px; margin:0 0 8px 0; display:flex; gap:8px; align-items:center; }
.nav-list{ margin:6px 0 0; padding-left:16px; }
.nav-list li{ margin:4px 0; }

/* 진행바(기존 progress 느낌 복제) */
.nav-progress{ height:8px; background:#E6EEF9; border-radius:999px; overflow:hidden; }
.nav-progress > div{ height:100%; background:#3B82F6; }

/* 전체 클릭 오버레이(투명 링크) */
a.nav-overlay{ position:absolute; inset:0; display:block; text-decoration:none; }
            
</style>
""", unsafe_allow_html=True)


# 라우팅 대상 페이지 목록 (신규: "친환경 지표", "전력 모니터링"으로 명칭 통일)
PAGES = ["메인 화면","전력 모니터링","위치 모니터링","메인 컨트롤","안전/경보","친환경 지표","로그인"]
if "nav" not in st.session_state:
    st.session_state["nav"] = "메인 화면"
def _get_nav_from_query():
    try:
        v = st.query_params.get("nav")               # 1.29+ (QueryParams 객체)
    except AttributeError:
        v = st.experimental_get_query_params().get("nav")  # 구버전

    if v is None:
        return None
    return v if isinstance(v, str) else v[0]

_nav = _get_nav_from_query()
if _nav in PAGES and _nav != st.session_state["nav"]:
    st.session_state["nav"] = _nav


# ========== 사이드바 ==========
with st.sidebar:
    # --- 브랜드/태그라인 ---
    st.markdown("""
    <div class="sb-header">
      <div class="sb-brand">
        <span class="logo">🛥️</span>
        <span class="name">Eco-Friendship<br>Project</span>
      </div>
      <div class="sb-subtitle">차세대 수소 선박 관제 시스템</div>
    </div>
    <hr class="sb-hr">
    <div class="sb-section-title">MENU</div>
    """, unsafe_allow_html=True)

    STYLES_SIDEBAR = {
        "container": {"padding": "8px 8px", "background-color": "transparent"},
        "icon": {"color": "#1F2937", "font-size": "18px"},
        "nav-link": {
            "font-size": "16px",
            "text-align": "left",
            "margin": "6px 0",
            "color": "#1F2937",
            "--hover-color": "#A4C2FF",   # hover 배경
        },
        "nav-link-selected": {
            "background-color": "#B1C9FA",
            "color": "#424446",
            "font-weight": "700",
        },
    }

    # --- 기존 option_menu 그대로 (hover/선택 스타일 유지) ---
    selected_menu = option_menu(
        menu_title=None,  # 제목은 위에서 따로 렌더
        options=PAGES,
        icons=["house", "speedometer2", "geo-alt", "controller", "exclamation-triangle", "globe-americas", "person-circle"],
        menu_icon="cast",
        default_index=PAGES.index(st.session_state["nav"]),
        styles=STYLES_SIDEBAR
    )

# 선택 변경 처리 (사이드바 바깥에서)
if selected_menu != st.session_state["nav"]:
    st.session_state["nav"] = selected_menu
    try:
        st.query_params.update({"nav": selected_menu})      # 최신 API (있는 경우)
    except Exception:
        st.experimental_set_query_params(nav=selected_menu) # 구버전 호환
    st.rerun()


# --- 팀 정보 ---
TEAM_NAME = "Eco-Friendship"
TEAM_MEMBERS = [
    "정민교 (메인 / 에너지)",
    "전영준 (비전 / 라이다)",
    "박재림 (제어 / 항법)"
]
MENTOR_NAME = "신승훈 멘토님"

st.markdown("""
<style>
.team-container {
    background-color: #f7f8fc;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    font-family: 'Segoe UI', sans-serif;
}
.team-title {
    font-size: 22px; font-weight: 700; margin-bottom: 10px;
    color: #2c3e50 !important;  /* 전역 색 덮어쓰기 방지 */
}
.team-subtitle {
    font-size: 16px; font-weight: 600; margin-bottom: 10px;
    color: #34495e !important;
}
.team-member { font-size: 15px; padding: 2px 0; color: #2c3e50 !important; }
.mentor { margin-top: 15px; font-size: 14px; font-style: italic; color: #7f8c8d !important; }
</style>
""", unsafe_allow_html=True)

members_html = "".join(f'<div class="team-member">{m}</div>' for m in TEAM_MEMBERS)
st.markdown(
    f"""
    <div class="team-container">
        <div class="team-title">Project Team: {TEAM_NAME}</div>
        <div class="team-subtitle">TEAM MEMBERS</div>
        {members_html}
        <div class="mentor">👨‍🏫 {MENTOR_NAME}</div>
    </div>
    """,
    unsafe_allow_html=True
)


LOGIN_HREF = f"?nav={_url.quote('로그인')}"
try:
    from streamlit_autorefresh import st_autorefresh
    st_autorefresh(interval=1000, key="clock_tick")
except Exception:
    pass  # 패키지 없으면 정적 표기로만 표시


now_str = datetime.now().strftime("%H:%M:%S")



# 고정 상단바 (시계에 id="clock" 추가)
st.markdown(f"""
<style>
  .app-topbar{{
    position: fixed; top:0; left:0; right:0; height:64px;
    display:flex; align-items:center; justify-content:space-between;
    padding:0 22px; z-index:1000;
    color:#fff; border-bottom:1px solid rgba(255,255,255,.15);
    background:linear-gradient(90deg,#3b4a67 0%, #536a92 100%);
    box-shadow:0 8px 24px rgba(0,0,0,.18);
    font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial;
  }}
  .app-topbar .brand{{ font-weight:800; letter-spacing:.2px; }}
  .app-topbar .right{{ display:flex; gap:14px; align-items:center; }}
  .app-pill{{ background:rgba(255,255,255,.18); padding:6px 10px; border-radius:999px; font-weight:700; }}
  .app-link{{ color:#fff; text-decoration:none; }}
  .app-link:hover{{ text-decoration:underline; }}
  /* 본문이 헤더에 가리지 않도록 여백 */
  .block-container{{ padding-top:80px; }}
            
</style>

<div class="app-topbar">
  <div class="brand">Eco-Friendship Dashboard</div>
  <div class="right">
    <div class="app-pill" id="clock">{now_str}</div>
    <a class="app-pill app-link" href="?nav=%EB%A1%9C%EA%B7%B8%EC%9D%B8" target="_self" rel="noopener">Login</a>
  </div>
</div>

<script>
  function upd(){{
    const el = document.getElementById('clock'); 
    if(!el) return;
    const n = new Date();
    const t = [n.getHours(), n.getMinutes(), n.getSeconds()].map(v=>String(v).padStart(2,'0')).join(':');
    el.textContent = t;
  }}
  setInterval(upd, 1000); upd();
</script>
""", unsafe_allow_html=True)

st.markdown("""
<style>
[data-testid="stHeader"] { z-index: 0 !important; background: transparent !important; }
.app-topbar { z-index: 99999 !important; }
 [data-testid="stSidebarCollapseControl"],
[data-testid="stSidebarCollapseButton"]{
    position:fixed; top:12px; left:12px;
    z-index:100000 !important;
    display:flex !important; opacity:1 !important; pointer-events:auto !important;
  }
</style>
""", unsafe_allow_html=True)


# ========== 데모 데이터 ==========
np.random.seed(7)
time_index = pd.date_range(pd.Timestamp.now().floor('min') - pd.Timedelta(minutes=38), periods=40, freq="1min")
fc   = 120 + np.random.randn(40).cumsum()*0.05  # 연료전지 kW
pv   =  35 + np.random.randn(40).cumsum()*0.03  # 태양광 kW
batt =  80 + np.random.randn(40).cumsum()*0.04  # 배터리 kW
mix_now = [fc[-1], pv[-1], batt[-1]]

soc_now = 85  # %
cii_grade = "A"
speed_kn = 15.2
heading = 95  # deg
weather = "맑음"
wind = 5.2
wave = 0.8

# ----- 공통 페이지 헤더 -----
PAGE_TITLES = {
    "메인 화면": "🚢 H2-Ocean Pioneer · 메인 관제",
    "전력 모니터링": "⚡ 전력 모니터링",
    "위치 모니터링": "🗺️ 위치 모니터링",
    "메인 컨트롤": "🧭 메인 컨트롤",
    "안전/경보": "🛟 안전 · 경보",
    "친환경 지표": "🌱 친환경 지표",
    "로그인": "🔐 로그인",
}

st.markdown("""
<style>
.page-header{
  margin: 6px 0 16px 0; padding: 14px 16px;
  background: linear-gradient(90deg,#eef4ff,#ffffff);
  border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,.06);
  display:flex; align-items:center; justify-content:space-between; gap:12px;
}
.page-title{font-size:22px; font-weight:800; color:#1f2b4d;}
.page-sub{font-size:13px; color:#64748b;}
</style>
""", unsafe_allow_html=True)

def page_header(nav: str, sub: str | None = None):
    title = PAGE_TITLES.get(nav, nav)
    right = f"<div class='page-sub'>{sub}</div>" if sub else ""
    st.markdown(f"""
    <div class="page-header">
      <div class="page-title">{title}</div>
      {right}
    </div>
    """, unsafe_allow_html=True)


# ========== 메인 화면 ==========
if st.session_state["nav"] == "메인 화면":
    # 히어로
    st.markdown(f"""
    <div class="hero">
        <div style="display:flex; justify-content:space-between; align-items:center; gap:16px; flex-wrap:wrap;">
            <div>
                <h2 style="margin:0 0 4px 0;">🚢 H2-Ocean Pioneer · 메인 관제</h2>
                <div class="badge">실시간</div>
            </div>
            <div style="display:flex; gap:24px; align-items:center;">
                <div><div class="kpi-sub">항해 상태</div><div class="kpi-number">✅ 안전 항해</div></div>
                <div><div class="kpi-sub">현재 속도</div><div class="kpi-number">{speed_kn:.1f} kn</div></div>
                <div><div class="kpi-sub">침로</div><div class="kpi-number">{heading}°</div></div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    st.markdown("")


# 4 개의 메인 대시보드 (중복 검사 제거 — 한 번만 실행되도록)
if st.session_state["nav"] == "메인 화면":
    # 히어로 아래에: 클릭 네비 카드 4개
    st.markdown('<div class="section soft">', unsafe_allow_html=True)
    c1, c2, c3, c4 = st.columns(4)

    def nav_square_card(title: str, desc_lines: list[str], target: str, key: str, emoji: str = ""):
        """정사각형 네비 카드: 카드 전체 클릭 → target 페이지 이동"""
        href = f"?nav={_url.quote(target)}"
        html = f"""
        <div class="nav-card">
        <a class="nav-overlay" href="{href}" target="_self"></a>
        <div class="nav-card-surface">
            <div class="nav-card-title">{emoji} {title}</div>
            <div class="nav-card-desc">{'<br>'.join(desc_lines)}</div>
        </div>
        </div>
        """
        st.markdown(html, unsafe_allow_html=True)


    with c1:
        nav_square_card(
            title="선박 운항 상태",
            desc_lines=[f"정상", f"속도: {speed_kn:.1f} knots", f"방향: {heading}° (ENE)"],
            target="메인 컨트롤",
            key="card_ctrl",
            emoji="🧭"
        )
        
    with c2:
        total_kw = float(fc[-1] + pv[-1] + batt[-1])
        nav_square_card(
            title="전력 시스템",
            desc_lines=[f"<span class='kpi-number'>{total_kw:.0f} kW</span>",
                        "<span class='kpi-sub'>총 출력량</span>",
                        f"배터리 SOC {soc_now}%"],
            target="전력 모니터링",
            key="card_power",
            emoji="⚡"
        )

    with c3:
        nav_square_card(
            title="친환경 지표",
            desc_lines=[f"<span class='kpi-sub'>CII 등급</span>",
                        f"<span class='kpi-number'>{cii_grade} 등급</span>",
                        "탄소 저감 목표 95%"],
            target="친환경 지표",
            key="card_green",
            emoji="🌱"
        )

    with c4:
        nav_square_card(
            title="안전 · 경보",
            desc_lines=["현재 상태: 정상", "최근 경보: 0건"],
            target="안전/경보",
            key="card_alarm",
            emoji="🛟"
        )
        
    st.markdown('</div>', unsafe_allow_html=True)

    # 아래 본문 블록들도 섹션으로 감싸서 구분감 ↑
    st.markdown('<div class="section">', unsafe_allow_html=True)
    g1, g2 = st.columns([3,2])
    with g1:
        st.markdown("#### ⚡ 전력 패널")
        view = st.radio(
            "표시 방식",
            ["전력 추이 (kW)", "누적 에너지 (kWh)", "스냅샷: 파워 플로우"],
            horizontal=True,
            label_visibility="collapsed"
        )

        # 준비: 데이터프레임 & 부호 있는 배터리 전력(데모용)
        df = pd.DataFrame({"time": time_index, "연료전지": fc, "태양광": pv, "배터리원": batt})
        batt_signed = (df["배터리원"] - df["배터리원"].mean()) * 0.8  # 실제 값 들어오면 교체
        df["배터리"] = batt_signed
        df["총발전"] = df["연료전지"] + df["태양광"]
        df["순전력"] = df["총발전"] + df["배터리"]  # (+ 공급, - 충전소모)

        if view == "전력 추이 (kW)":
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=df["time"], y=df["연료전지"], name="연료전지",
                                    mode="lines", line=dict(width=2), fill=None))
            fig.add_trace(go.Scatter(x=df["time"], y=df["연료전지"] + df["태양광"], name="태양광",
                                    mode="lines", line=dict(width=0), fill="tonexty",
                                    hoverinfo="skip", showlegend=False))
            fig.add_trace(go.Scatter(x=df["time"], y=df["배터리"], name="배터리(충/방전)",
                                    mode="lines", line=dict(width=1.5), fill="tozeroy"))
            fig.add_trace(go.Scatter(x=df["time"], y=df["순전력"], name="순전력(버스)",
                                    mode="lines", line=dict(width=3)))
            fig.update_layout(margin=dict(l=10,r=10,t=10,b=0), hovermode="x unified",
                            height=340, legend=dict(orientation="h", yanchor="bottom", y=1.02, x=0))
            fig.update_yaxes(zeroline=True, zerolinewidth=1)
            st.plotly_chart(fig, use_container_width=True)

        elif view == "누적 에너지 (kWh)":
            dth = df["time"].diff().dt.total_seconds().fillna(0) / 3600.0
            e_fc   = (df["연료전지"] * dth).cumsum()
            e_pv   = (df["태양광"] * dth).cumsum()
            e_batt = (df["배터리"].clip(lower=0) * dth).cumsum()  # 방전만 누적
            fig_e = go.Figure()
            fig_e.add_trace(go.Scatter(x=df["time"], y=e_fc, name="연료전지(kWh)", mode="lines", line=dict(width=2)))
            fig_e.add_trace(go.Scatter(x=df["time"], y=e_fc + e_pv, name="태양광(kWh)", mode="lines",
                                    line=dict(width=0), fill="tonexty", hoverinfo="skip", showlegend=False))
            fig_e.add_trace(go.Scatter(x=df["time"], y=e_fc + e_pv + e_batt, name="배터리 방전(kWh)",
                                    mode="lines", line=dict(width=0), fill="tonexty", hoverinfo="skip", showlegend=False))
            fig_e.update_layout(margin=dict(l=10,r=10,t=10,b=0), height=340,
                                hovermode="x unified", legend=dict(orientation="h", yanchor="bottom", y=1.02, x=0))
            st.plotly_chart(fig_e, use_container_width=True)

        else:  # "스냅샷: 파워 플로우"
            fc_now, pv_now, batt_now = float(df["연료전지"].iloc[-1]), float(df["태양광"].iloc[-1]), float(df["배터리"].iloc[-1])
            batt_dis = max(batt_now, 0)      # 방전(출력)
            batt_chg = max(-batt_now, 0)     # 충전(소비)
            bus_in = fc_now + pv_now + batt_dis
            bus_out = max(bus_in - batt_chg, 0)
            to_prop = bus_out * 0.85
            to_aux  = bus_out * 0.15

            labels = ["연료전지", "태양광", "배터리", "DC 버스", "추진", "보조부하", "배터리 충전"]
            src = [0, 1, 2, 3, 3, 3]
            tgt = [3, 3, 3, 4, 5, 6]
            val = [fc_now, pv_now, batt_dis, to_prop, to_aux, batt_chg]

            fig_s = go.Figure(data=[go.Sankey(
                node=dict(label=labels, pad=20, thickness=16),
                link=dict(source=src, target=tgt, value=val)
            )])
            fig_s.update_layout(margin=dict(l=10,r=10,t=10,b=10), height=340)
            st.plotly_chart(fig_s, use_container_width=True)

        # 모든 뷰에서 보이는 요약
        net_now = float(df["순전력"].iloc[-1])
        batt_state = "방전" if float(df["배터리"].iloc[-1]) >= 0 else "충전"
        st.caption(f"현재 순전력: **{net_now:.1f} kW** · 배터리 상태: **{batt_state}**")
        
    with g2:        
        c21, c22 = st.columns(2)
        with c21:
            st.markdown("#### 🔋 SOC")
            fig_soc = go.Figure(go.Indicator(
                mode="gauge+number",
                value=soc_now,
                number={'suffix': "%"},
                gauge={'axis': {'range': [0, 100]},
                    'bar': {'thickness': 0.8},
                    'steps': [
                        {'range': [0, 20], 'color': "#fde2e1"},
                        {'range': [20, 60], 'color': "#fff3cd"},
                        {'range': [60, 100], 'color': "#e2f5e7"}],
                    'threshold': {'line': {'width': 3}, 'thickness': 0.9, 'value': soc_now}}
            ))
            fig_soc.update_layout(height=160, margin=dict(t=10,b=10,l=10,r=10))
            st.plotly_chart(fig_soc, use_container_width=True)

        with c22:
            st.markdown("#### ⚡ 에너지 믹스")
            fig_mix = go.Figure(go.Pie(values=mix_now, labels=["연료전지","태양광","배터리"], hole=0.62))
            fig_mix.update_layout(height=160, margin=dict(t=10,b=10,l=10,r=10),
                                legend=dict(orientation="h", y=-0.1))
            st.plotly_chart(fig_mix, use_container_width=True)

        st.markdown("#### 🗺️ 현재 위치")
        map_df = pd.DataFrame({"lat":[35.10, 35.11, 35.12], "lon":[129.04, 129.06, 129.08]})
        st.map(map_df)
    st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('<div class="section">', unsafe_allow_html=True)
    st.markdown("#### 🚨 알림 · 이벤트 로그")
    alerts = pd.DataFrame([
    {"시간":"15:03:40","유형":"INFO","메시지":"항해 상태 정상","심각도":"낮음"},
    {"시간":"15:02:11","유형":"WARN","메시지":"좌현 풍속 일시 상승(>8 m/s)","심각도":"중간"},
    {"시간":"14:58:07","유형":"INFO","메시지":"배터리 충전 시작(SOC<86%)","심각도":"낮음"},
    ])
    st.dataframe(alerts, hide_index=True, use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)

# ========== 다른 페이지 ==========
elif st.session_state["nav"] == "전력 모니터링":
    page_header("전력 모니터링", sub=f"총 출력 {float(fc[-1] + pv[-1] + batt[-1]):.0f} kW · 배터리 SOC {soc_now}%")
    st.metric("총 출력(kW)", f"{float(fc[-1] + pv[-1] + batt[-1]):.0f}")
    st.write("전력 패널/플롯 영역 (추가 예정)")

elif st.session_state["nav"] == "위치 모니터링":
    page_header("위치 모니터링", sub="실시간 위치 · 경로 추적")
    st.write("지도/트랙 표시 영역 (추가 예정)")

elif st.session_state["nav"] == "메인 컨트롤":
    page_header("메인 컨트롤", sub="수동/자율 전환 · 추진/조향 제어")
    st.write("컨트롤 패널 영역 (추가 예정)")

elif st.session_state["nav"] == "안전/경보":
    page_header("안전/경보", sub="현재 상태 정상 · 최근 경보 0건")
    st.write("알람/이벤트 로그 영역 (추가 예정)")

elif st.session_state["nav"] == "친환경 지표":
    page_header("친환경 지표", sub=f"CII {cii_grade} 등급 · 탄소 저감 목표 95%")
    st.write("지표/지수 카드 영역 (추가 예정)")

elif st.session_state["nav"] == "로그인":
    # ---------- 로그인 초기화 ----------
    if "users" not in st.session_state:
        st.session_state["users"] = {
            "admin": {"password": "1234", "email": "admin@example.com", "is_active": True}
        }

    if "pw_reset" not in st.session_state:
        st.session_state["pw_reset"] = {}

    st.session_state.setdefault("logged_in", False)
    st.session_state.setdefault("username", None)
    st.session_state.setdefault("view", "login")

    # 실시간 검증 플래그 기본값
    st.session_state.setdefault("forgot_mismatch", False)
    st.session_state.setdefault("admin_mismatch", False)

    ADMIN_KEY = "ADMIN-KEY-CHANGE-ME"

    # -----------------------------
    # 유틸
    # -----------------------------
    def gen_code(n=6):
        return "".join(random.choices(string.digits, k=n))

    def send_reset_code(username: str):
        code = gen_code()
        st.session_state.pw_reset[username] = {
            "code": code,
            "expire_at": datetime.utcnow() + timedelta(minutes=10),
        }
        return code

    def verify_reset_code(username: str, code: str) -> bool:
        item = st.session_state.pw_reset.get(username)
        if not item:
            return False
        if datetime.utcnow() > item["expire_at"]:
            return False
        return item["code"] == code

    def user_exists(username: str) -> bool:
        return username in st.session_state.users

    def check_password(username: str, password: str) -> bool:
        user = st.session_state.users.get(username)
        return bool(user and user["is_active"] and user["password"] == password)

    def create_or_activate_user(username: str, password: str, email: str):
        st.session_state.users[username] = {
            "password": password,
            "email": email,
            "is_active": True,
        }

    def nav_to(view: str):
        st.session_state["view"] = view
        st.experimental_rerun()

    # -----------------------------
    # 콜백: 비밀번호 일치 여부 실시간 체크
    # -----------------------------
    def check_match(scope: str):
        """scope: 'forgot' 또는 'admin'"""
        if scope == "forgot":
            pw = st.session_state.get("pw_new", "")
            pw2 = st.session_state.get("pw_new2", "")
            st.session_state["forgot_mismatch"] = bool(pw and pw2 and pw != pw2)
        elif scope == "admin":
            pw = st.session_state.get("ad_pw", "")
            pw2 = st.session_state.get("ad_pw2", "")
            st.session_state["admin_mismatch"] = bool(pw and pw2 and pw != pw2)

    # -----------------------------
    # 로그인 화면
    # -----------------------------
    def show_login_page():
        st.title("🔐 로그인")

        with st.form("login_form"):
            username = st.text_input("사용자 이름", placeholder="admin")
            password = st.text_input("비밀번호", type="password", placeholder="••••")

            c1, c2, c3 = st.columns([1, 1, 1])
            with c2:
                submitted = st.form_submit_button("로그인", use_container_width=True)

            if submitted:
                if check_password(username, password):
                    st.session_state["logged_in"] = True
                    st.session_state["username"] = username
                    st.success("로그인에 성공했습니다.")
                    st.experimental_rerun()
                else:
                    st.error("사용자 이름 또는 비밀번호가 올바르지 않습니다.")

        lcol, rcol = st.columns(2)
        with lcol:
            if st.button("🔑 비밀번호 찾기", type="secondary", use_container_width=True):
                nav_to("forgot")
        with rcol:
            if st.button("🛡️ 관리자 등록", type="secondary", use_container_width=True):
                nav_to("admin")

    # -----------------------------
    # 비밀번호 찾기 화면
    # -----------------------------
    def show_forgot_page():
        st.markdown("### 🔑 비밀번호 찾기")
        if st.button("← 로그인으로 돌아가기", type="secondary"):
            nav_to("login")

        st.write("아이디를 확인하여 **재설정 코드**를 발급받고, 아래에서 새 비밀번호로 변경하십시오.")

        # 코드 발급
        u = st.text_input("사용자 이름", placeholder="내 아이디", key="pw_user")
        email_hint = st.text_input("등록 이메일(선택)", placeholder="name@example.com", key="pw_email")
        if st.button("재설정 코드 보내기"):
            if not user_exists(u):
                st.error("해당 사용자가 없거나 비활성화 상태입니다.")
            else:
                code = send_reset_code(u)
                st.info("재설정 코드가 발급되었습니다. (데모이므로 화면에 표시합니다.)")
                with st.expander("📩 데모 코드 보기"):
                    st.code(code, language="text")

        st.divider()

        # 실시간 비밀번호 확인
        u2 = st.text_input("사용자 이름(다시 입력)", placeholder="내 아이디", key="pw_user2")
        code_in = st.text_input("재설정 코드", placeholder="6자리 숫자", key="pw_code")
        new_pw = st.text_input("새 비밀번호", type="password", key="pw_new")
        new_pw2 = st.text_input("새 비밀번호 확인", type="password", key="pw_new2")

        if new_pw and new_pw2:
            if new_pw != new_pw2:
                st.markdown("<span style='color:red;'>비밀번호가 일치하지 않습니다.</span>", unsafe_allow_html=True)
            else:
                st.markdown("<span style='color:green;'>비밀번호가 일치합니다.</span>", unsafe_allow_html=True)

        if st.button("비밀번호 재설정"):
            if not user_exists(u2):
                st.error("해당 사용자가 존재하지 않습니다.")
            elif new_pw != new_pw2:
                st.error("비밀번호와 비밀번호 확인이 일치하지 않습니다.")
            elif not verify_reset_code(u2, code_in.strip()):
                st.error("코드가 올바르지 않거나 만료되었습니다. 다시 요청하십시오.")
            else:
                st.session_state.users[u2]["password"] = new_pw
                st.session_state.pw_reset.pop(u2, None)
                st.success("비밀번호가 재설정되었습니다. 로그인 페이지로 돌아가 로그인하십시오.")

    # -----------------------------
    # 관리자 등록 화면
    # -----------------------------
    def show_admin_page():
        st.markdown("### 🛡️ 관리자 등록(초대코드)")
        if st.button("← 로그인으로 돌아가기", type="secondary"):
            nav_to("login")

        st.caption("신규 계정은 **관리자 초대코드**로만 생성/활성화됩니다.")

        invite = st.text_input("관리자 초대코드", placeholder="ADMIN-KEY-…", key="ad_invite")
        new_user = st.text_input("새 사용자 이름", placeholder="영문/숫자 권장", key="ad_user")
        new_email = st.text_input("이메일(선택)", placeholder="name@example.com", key="ad_email")
        new_pw = st.text_input("비밀번호", type="password", key="ad_pw")
        new_pw2 = st.text_input("비밀번호 확인", type="password", key="ad_pw2")

        if new_pw and new_pw2:
            if new_pw != new_pw2:
                st.markdown("<span style='color:red;'>비밀번호가 일치하지 않습니다.</span>", unsafe_allow_html=True)
            else:
                st.markdown("<span style='color:green;'>비밀번호가 일치합니다.</span>", unsafe_allow_html=True)

        if st.button("계정 만들기"):
            if invite != ADMIN_KEY:
                st.error("초대코드가 올바르지 않습니다.")
            elif not new_user or not new_pw:
                st.error("사용자 이름과 비밀번호를 입력하십시오.")
            elif new_pw != new_pw2:
                st.error("비밀번호와 비밀번호 확인이 일치하지 않습니다.")
            else:
                create_or_activate_user(new_user, new_pw, new_email)
                st.success("계정이 활성화되었습니다. 로그인 페이지에서 방금 만든 계정으로 로그인하십시오.")

    # -----------------------------
    # 로그인 이후 메인
    # -----------------------------
    def show_main_page():
        st.markdown(
            "<h1 style='text-align:center;'>🎉 환영합니다!</h1>",
            unsafe_allow_html=True,
        )
        st.markdown(
            f"<h3 style='text-align:center;'>{st.session_state['username']}님, 성공적으로 로그인하였습니다.</h3>",
            unsafe_allow_html=True,
        )
        st.markdown("<br>", unsafe_allow_html=True)
        c1, c2, c3 = st.columns([1, 1, 1])
        with c2:
            if st.button("🔓 로그아웃", use_container_width=True):
                st.session_state["logged_in"] = False
                st.session_state["username"] = None
                st.session_state["view"] = "login"
                st.experimental_rerun()

    # ---------- 실제 뷰 선택 ----------
    view = st.session_state.get("view", "login")
    if st.session_state.get("logged_in", False):
        show_main_page()
    else:
        if view == "login":
            show_login_page()
        elif view == "forgot":
            show_forgot_page()
        elif view == "admin":
            show_admin_page()

# (끝)
